{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sales_silver",
						"type": "DatasetReference"
					},
					"name": "sales"
				},
				{
					"dataset": {
						"referenceName": "ds_products_silver",
						"type": "DatasetReference"
					},
					"name": "products"
				},
				{
					"dataset": {
						"referenceName": "ds_customers_silver_2",
						"type": "DatasetReference"
					},
					"name": "customers"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "sort1"
				},
				{
					"name": "rank1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "join3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SaleID as integer,",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          SaleDate as date,",
				"          Quantity as integer,",
				"          TotalAmount as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sales",
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as decimal(10,2),",
				"          StockQuantity as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> products",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          City as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"sales, products join(sales@ProductID == products@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(products@ProductID),",
				"     TotalAmount = sum(TotalAmount),",
				"          TotalSalesCount = count(SaleID),",
				"          ProductName = first(ProductName),",
				"          Category = first(Category),",
				"          Price = first(Price),",
				"          StockQuantity = first(StockQuantity)) ~> aggregate1",
				"customers, sales join(customers@CustomerID == sales@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 aggregate(groupBy(customers@CustomerID),",
				"     TotalAmount = sum(TotalAmount),",
				"          CustomerName = first(CustomerName),",
				"          Email = first(Email),",
				"          Phone = first(Phone)) ~> aggregate2",
				"aggregate2 sort(desc(TotalAmount, false)) ~> sort1",
				"sort1 rank(desc(TotalAmount, true),",
				"     output(rank as long),",
				"     dense: true) ~> rank1",
				"rank1 filter(rank<=6) ~> filter1",
				"products, sales join(products@ProductID == ERROR_FUNCTION(''),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3"
			]
		}
	}
}