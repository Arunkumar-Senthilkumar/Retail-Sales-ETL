{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_customers",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_products",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_sales",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver_csv",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_silver_csv",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_silver_csv",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer '000',",
				"          CustomerName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          City as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as decimal(10,2),",
				"          StockQuantity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          SaleID as integer,",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          SaleDate as date,",
				"          Quantity as integer,",
				"          TotalAmount as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source1 filter(!isNull(CustomerID)) ~> filter1",
				"filter1 aggregate(groupBy(CustomerID),",
				"     customer_count = count(CustomerID)<=1,",
				"          CustomerName = first(CustomerName),",
				"          Email = first(Email),",
				"          Phone = first(Phone),",
				"          City = first(City),",
				"          Country = first(Country)) ~> aggregate1",
				"aggregate1 derive(Phone = iif(Phone == 'None', \"0\", Phone)) ~> derivedColumn1",
				"source2 filter(notEquals(ProductID, 0)) ~> filter2",
				"filter2 derive(Category = iif(isNull(Category),\"Unknown\", Category),",
				"          StockQuantity = iif(StockQuantity==\"None\",0, toInteger(StockQuantity))) ~> derivedColumn2",
				"derivedColumn2 aggregate(groupBy(Category),",
				"     CategoryPriceAvug = toDecimal(avg(Price), 10, 2)) ~> aggregate2",
				"aggregate2, derivedColumn2 join(aggregate2@Category == derivedColumn2@Category,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(Price = iif(Price==0.0,CategoryPriceAvug, Price)) ~> derivedColumn3",
				"source3 filter(!isNull(CustomerID)) ~> filter3",
				"filter3 derive(ProductID = iif(isNull(ProductID), 0, ProductID),",
				"          Quantity = iif(isNull(Quantity),0,Quantity),",
				"          TotalAmount = iif(isNull(TotalAmount), toDecimal(0, 10, 2), TotalAmount),",
				"          SaleDate = iif(isNull(SaleDate),toDate(\"2000-01-01\"),SaleDate)) ~> derivedColumn4",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['customers.csv'],",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          Email,",
				"          Phone,",
				"          City,",
				"          Country",
				"     ),",
				"     partitionBy('hash', 1),",
				"     format: 'parquet') ~> sink1",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Products.csv'],",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ProductID,",
				"          ProductName,",
				"          Category = derivedColumn2@Category,",
				"          Price,",
				"          StockQuantity",
				"     ),",
				"     partitionBy('hash', 1),",
				"     format: 'parquet') ~> sink2",
				"derivedColumn4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['Sales.csv'],",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          SaleID,",
				"          CustomerID,",
				"          ProductID,",
				"          SaleDate,",
				"          Quantity,",
				"          TotalAmount",
				"     ),",
				"     partitionBy('hash', 1),",
				"     format: 'parquet') ~> sink3"
			]
		}
	}
}