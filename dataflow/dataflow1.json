{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_sales",
						"type": "DatasetReference"
					},
					"name": "sales"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_products",
						"type": "DatasetReference"
					},
					"name": "products"
				},
				{
					"dataset": {
						"referenceName": "ds_raw_customers",
						"type": "DatasetReference"
					},
					"name": "Customers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sales_silver",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_products_silver",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_customers_silver",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter3"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SaleID as integer,",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          SaleDate as date,",
				"          Quantity as integer,",
				"          TotalAmount as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sales",
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as decimal(10,2),",
				"          StockQuantity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> products",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          City as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customers",
				"sales filter(!isNull(SaleID) && !isNull(CustomerID)) ~> filter1",
				"filter1 derive(ProductID = iif(isNull(ProductID), 0, ProductID),",
				"          SaleDate = iif(isNull(SaleDate), toDate('2025-03-14', 'yyyy-MM-dd'), SaleDate),",
				"          Quantity = iif(isNull(Quantity),0,Quantity),",
				"          TotalAmount = iif(isNull(TotalAmount),toDecimal(0,10,2),TotalAmount)) ~> derivedColumn1",
				"products filter(and(!isNull(ProductID), ProductID != 0)) ~> filter2",
				"filter2 derive(Category = iif(isNull(Category),\"unknown\",Category),",
				"          StockQuantity = iif(StockQuantity==\"None\",\"0\",StockQuantity)) ~> derivedColumn2",
				"derivedColumn2 aggregate(groupBy(Category),",
				"     AvgCategoryPrice = toDecimal(avg(toInteger(Price)),10,2),",
				"          AvgStockQuantity = toInteger(avg(toInteger(StockQuantity)))) ~> aggregate1",
				"aggregate1, derivedColumn2 join(aggregate1@Category == derivedColumn2@Category,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(Price = iif(Price==toDecimal(0, 10,2),AvgCategoryPrice,Price),",
				"          StockQuantity = iif(StockQuantity==toString(0),toString(AvgStockQuantity),StockQuantity)) ~> derivedColumn3",
				"Customers filter(!isNull(CustomerID)) ~> filter3",
				"filter3 derive(CustomerName = iif(isNull(CustomerName),\"Unknown\",CustomerName)) ~> derivedColumn4",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          SaleID,",
				"          CustomerID,",
				"          ProductID,",
				"          SaleDate,",
				"          Quantity,",
				"          TotalAmount",
				"     )) ~> sink1",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ProductID,",
				"          ProductName,",
				"          Category = derivedColumn2@Category,",
				"          Price,",
				"          StockQuantity",
				"     )) ~> sink2",
				"derivedColumn4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[(concat('customers_', toString(toDate(currentTimestamp()), 'yyyy_MM_dd'), '.csv'))],",
				"     umask: 0222,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          Email,",
				"          Phone,",
				"          City,",
				"          Country",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}