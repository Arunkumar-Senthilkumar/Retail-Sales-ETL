{
	"name": "silver to gold",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sales_silver",
						"type": "DatasetReference"
					},
					"name": "sales"
				},
				{
					"dataset": {
						"referenceName": "ds_products_silver",
						"type": "DatasetReference"
					},
					"name": "products"
				},
				{
					"dataset": {
						"referenceName": "ds_customers_silver_2",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "ds_RevenuePerProduct",
						"type": "DatasetReference"
					},
					"name": "RevenuePerProducttable"
				},
				{
					"dataset": {
						"referenceName": "ds_topcustomer",
						"type": "DatasetReference"
					},
					"name": "TopCustomersTable"
				},
				{
					"dataset": {
						"referenceName": "ds_productPerformance",
						"type": "DatasetReference"
					},
					"name": "ProductPerformanceTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_RevenuePerProduct",
						"type": "DatasetReference"
					},
					"name": "RevenuePerProduct"
				},
				{
					"dataset": {
						"referenceName": "ds_productPerformance",
						"type": "DatasetReference"
					},
					"name": "ProductPerformance"
				},
				{
					"dataset": {
						"referenceName": "ds_topcustomer",
						"type": "DatasetReference"
					},
					"name": "TopCustomers"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "join2"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "sort1"
				},
				{
					"name": "rank1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "join3"
				},
				{
					"name": "aggregate3"
				},
				{
					"name": "aggregate4"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "AlterRow2"
				},
				{
					"name": "AlterRow3"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "lookup3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SaleID as integer,",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          SaleDate as date,",
				"          Quantity as integer,",
				"          TotalAmount as decimal(10,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sales",
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as decimal(10,2),",
				"          StockQuantity as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> products",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          Email as string,",
				"          Phone as string,",
				"          City as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"source(output(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as decimal(10,2),",
				"          TotalProductSalesAmount as decimal(10,2),",
				"          TotalSalesCount as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> RevenuePerProducttable",
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          TotalAmount as decimal(10,2),",
				"          rank as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> TopCustomersTable",
				"source(output(",
				"          ProductId as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          StockQuantity as integer,",
				"          TotalQuantitySold as integer,",
				"          RemainingStockQuantity as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductPerformanceTable",
				"sales, products join(sales@ProductID == products@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(products@ProductID),",
				"     TotalProductSalesAmount = sum(TotalAmount),",
				"          TotalSalesCount = toInteger(count(SaleID)),",
				"          ProductName = first(ProductName),",
				"          Category = first(Category),",
				"          Price = first(Price),",
				"          StockQuantity = first(StockQuantity)) ~> aggregate1",
				"aggregate4, sales join(aggregate4@CustomerID == sales@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 aggregate(groupBy(sales@CustomerID),",
				"     TotalAmount = sum(TotalAmount),",
				"          CustomerName = first(CustomerName),",
				"          Email = first(Email),",
				"          Phone = first(Phone)) ~> aggregate2",
				"aggregate2 sort(desc(TotalAmount, false)) ~> sort1",
				"sort1 rank(desc(TotalAmount, true),",
				"     output(rank as long),",
				"     dense: true) ~> rank1",
				"rank1 filter(rank<=6) ~> filter1",
				"products, sales join(products@ProductID == sales@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 aggregate(groupBy(products@ProductID),",
				"     TotalQuantitySold = toInteger(sum(Quantity)),",
				"          StockQuantity = first(StockQuantity),",
				"          ProductName = first(ProductName),",
				"          Category = first(Category),",
				"          Price = first(Price),",
				"          Quantity = first(Quantity)) ~> aggregate3",
				"customers aggregate(groupBy(CustomerID),",
				"     each(match(name!='CustomerID'), $$ = first($$))) ~> aggregate4",
				"aggregate3 derive(RemainingStockQuantity = toInteger(StockQuantity-TotalQuantitySold)) ~> derivedColumn1",
				"lookup1 alterRow(upsertIf(iif(isNull(RevenuePerProducttable@ProductID),true(),false()))) ~> AlterRow1",
				"lookup3 alterRow(upsertIf(iif(isNull(ProductPerformanceTable@ProductId),true(),false()))) ~> AlterRow2",
				"lookup2 alterRow(insertIf(isNull(TopCustomersTable@CustomerID)),",
				"     updateIf(!isNull(TopCustomersTable@CustomerID))) ~> AlterRow3",
				"aggregate1, RevenuePerProducttable lookup(aggregate1@ProductID == RevenuePerProducttable@ProductID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"filter1, TopCustomersTable lookup(aggregate2@CustomerID == TopCustomersTable@CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"derivedColumn1, ProductPerformanceTable lookup(aggregate3@ProductID == ProductPerformanceTable@ProductId,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup3",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductID as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          Price as decimal(10,2),",
				"          TotalProductSalesAmount as decimal(10,2),",
				"          TotalSalesCount as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ProductID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> RevenuePerProduct",
				"AlterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductId as integer,",
				"          ProductName as string,",
				"          Category as string,",
				"          StockQuantity as integer,",
				"          TotalQuantitySold as integer,",
				"          RemainingStockQuantity as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['ProductId'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ProductId = aggregate3@ProductID,",
				"          ProductName = aggregate3@ProductName,",
				"          Category = aggregate3@Category,",
				"          StockQuantity = aggregate3@StockQuantity,",
				"          TotalQuantitySold = aggregate3@TotalQuantitySold,",
				"          RemainingStockQuantity = derivedColumn1@RemainingStockQuantity",
				"     )) ~> ProductPerformance",
				"AlterRow3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          TotalAmount as decimal(10,2),",
				"          rank as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['CustomerID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TopCustomers"
			]
		}
	}
}