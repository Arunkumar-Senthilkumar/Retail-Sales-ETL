{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Retail-Sales-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_topcustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_retail_sales",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "varchar"
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "rank",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "TopCustomers"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales data to raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['SaleID']"
										},
										"sink": {
											"name": "SaleID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['CustomerID']"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['ProductID']"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['SaleDate']"
										},
										"sink": {
											"name": "SaleDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Quantity']"
										},
										"sink": {
											"name": "Quantity",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['TotalAmount']"
										},
										"sink": {
											"name": "TotalAmount",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_RestAPI",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_raw_sales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw to silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_sales",
								"type": "DatasetReference"
							},
							"name": "sales"
						},
						{
							"dataset": {
								"referenceName": "ds_raw_products",
								"type": "DatasetReference"
							},
							"name": "products"
						},
						{
							"dataset": {
								"referenceName": "ds_raw_customers",
								"type": "DatasetReference"
							},
							"name": "Customers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sales_silver",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_products_silver",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ds_customers_silver",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "derivedColumn4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SaleID as integer,",
						"          CustomerID as integer,",
						"          ProductID as integer,",
						"          SaleDate as date,",
						"          Quantity as integer,",
						"          TotalAmount as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sales",
						"source(output(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as decimal(10,2),",
						"          StockQuantity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> products",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Email as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Customers",
						"sales filter(!isNull(SaleID) && !isNull(CustomerID)) ~> filter1",
						"filter1 derive(ProductID = iif(isNull(ProductID), 0, ProductID),",
						"          SaleDate = iif(isNull(SaleDate), toDate('2025-03-14', 'yyyy-MM-dd'), SaleDate),",
						"          Quantity = iif(isNull(Quantity),0,Quantity),",
						"          TotalAmount = iif(isNull(TotalAmount),toDecimal(0,10,2),TotalAmount)) ~> derivedColumn1",
						"products filter(and(!isNull(ProductID), ProductID != 0)) ~> filter2",
						"filter2 derive(Category = iif(isNull(Category),\"unknown\",Category),",
						"          StockQuantity = iif(StockQuantity==\"None\",\"0\",StockQuantity)) ~> derivedColumn2",
						"derivedColumn2 aggregate(groupBy(Category),",
						"     AvgCategoryPrice = toDecimal(avg(toInteger(Price)),10,2),",
						"          AvgStockQuantity = toInteger(avg(toInteger(StockQuantity)))) ~> aggregate1",
						"aggregate1, derivedColumn2 join(aggregate1@Category == derivedColumn2@Category,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 derive(Price = iif(Price==toDecimal(0, 10,2),AvgCategoryPrice,Price),",
						"          StockQuantity = iif(StockQuantity==toString(0),toString(AvgStockQuantity),StockQuantity)) ~> derivedColumn3",
						"Customers filter(!isNull(CustomerID)) ~> filter3",
						"filter3 derive(CustomerName = iif(isNull(CustomerName),\"Unknown\",CustomerName)) ~> derivedColumn4",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0222,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          SaleID,",
						"          CustomerID,",
						"          ProductID,",
						"          SaleDate,",
						"          Quantity,",
						"          TotalAmount",
						"     )) ~> sink1",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     truncate: true,",
						"     umask: 0222,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          ProductID,",
						"          ProductName,",
						"          Category = derivedColumn2@Category,",
						"          Price,",
						"          StockQuantity",
						"     )) ~> sink2",
						"derivedColumn4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat('customers_', toString(toDate(currentTimestamp()), 'yyyy_MM_dd'), '.csv'))],",
						"     umask: 0222,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          Email,",
						"          Phone,",
						"          City,",
						"          Country",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/silver to gold')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sales_silver",
								"type": "DatasetReference"
							},
							"name": "sales"
						},
						{
							"dataset": {
								"referenceName": "ds_products_silver",
								"type": "DatasetReference"
							},
							"name": "products"
						},
						{
							"dataset": {
								"referenceName": "ds_customers_silver_2",
								"type": "DatasetReference"
							},
							"name": "customers"
						},
						{
							"dataset": {
								"referenceName": "ds_RevenuePerProduct",
								"type": "DatasetReference"
							},
							"name": "RevenuePerProducttable"
						},
						{
							"dataset": {
								"referenceName": "ds_topcustomer",
								"type": "DatasetReference"
							},
							"name": "TopCustomersTable"
						},
						{
							"dataset": {
								"referenceName": "ds_productPerformance",
								"type": "DatasetReference"
							},
							"name": "ProductPerformanceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_RevenuePerProduct",
								"type": "DatasetReference"
							},
							"name": "RevenuePerProduct"
						},
						{
							"dataset": {
								"referenceName": "ds_productPerformance",
								"type": "DatasetReference"
							},
							"name": "ProductPerformance"
						},
						{
							"dataset": {
								"referenceName": "ds_topcustomer",
								"type": "DatasetReference"
							},
							"name": "TopCustomers"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "sort1"
						},
						{
							"name": "rank1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "join3"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "aggregate4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "AlterRow3"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "lookup2"
						},
						{
							"name": "lookup3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SaleID as integer,",
						"          CustomerID as integer,",
						"          ProductID as integer,",
						"          SaleDate as date,",
						"          Quantity as integer,",
						"          TotalAmount as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sales",
						"source(output(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as decimal(10,2),",
						"          StockQuantity as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> products",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Email as string,",
						"          Phone as string,",
						"          City as string,",
						"          Country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customers",
						"source(output(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as decimal(10,2),",
						"          TotalProductSalesAmount as decimal(10,2),",
						"          TotalSalesCount as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> RevenuePerProducttable",
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          TotalAmount as decimal(10,2),",
						"          rank as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TopCustomersTable",
						"source(output(",
						"          ProductId as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          StockQuantity as integer,",
						"          TotalQuantitySold as integer,",
						"          RemainingStockQuantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductPerformanceTable",
						"sales, products join(sales@ProductID == products@ProductID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(products@ProductID),",
						"     TotalProductSalesAmount = sum(TotalAmount),",
						"          TotalSalesCount = toInteger(count(SaleID)),",
						"          ProductName = first(ProductName),",
						"          Category = first(Category),",
						"          Price = first(Price),",
						"          StockQuantity = first(StockQuantity)) ~> aggregate1",
						"aggregate4, sales join(aggregate4@CustomerID == sales@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 aggregate(groupBy(sales@CustomerID),",
						"     TotalAmount = sum(TotalAmount),",
						"          CustomerName = first(CustomerName),",
						"          Email = first(Email),",
						"          Phone = first(Phone)) ~> aggregate2",
						"aggregate2 sort(desc(TotalAmount, false)) ~> sort1",
						"sort1 rank(desc(TotalAmount, true),",
						"     output(rank as long),",
						"     dense: true) ~> rank1",
						"rank1 filter(rank<=6) ~> filter1",
						"products, sales join(products@ProductID == sales@ProductID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3 aggregate(groupBy(products@ProductID),",
						"     TotalQuantitySold = toInteger(sum(Quantity)),",
						"          StockQuantity = first(StockQuantity),",
						"          ProductName = first(ProductName),",
						"          Category = first(Category),",
						"          Price = first(Price),",
						"          Quantity = first(Quantity)) ~> aggregate3",
						"customers aggregate(groupBy(CustomerID),",
						"     each(match(name!='CustomerID'), $$ = first($$))) ~> aggregate4",
						"aggregate3 derive(RemainingStockQuantity = toInteger(StockQuantity-TotalQuantitySold)) ~> derivedColumn1",
						"lookup1 alterRow(upsertIf(iif(isNull(RevenuePerProducttable@ProductID),true(),false()))) ~> AlterRow1",
						"lookup3 alterRow(upsertIf(iif(isNull(ProductPerformanceTable@ProductId),true(),false()))) ~> AlterRow2",
						"lookup2 alterRow(insertIf(isNull(TopCustomersTable@CustomerID)),",
						"     updateIf(!isNull(TopCustomersTable@CustomerID))) ~> AlterRow3",
						"aggregate1, RevenuePerProducttable lookup(aggregate1@ProductID == RevenuePerProducttable@ProductID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"filter1, TopCustomersTable lookup(aggregate2@CustomerID == TopCustomersTable@CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup2",
						"derivedColumn1, ProductPerformanceTable lookup(aggregate3@ProductID == ProductPerformanceTable@ProductId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup3",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          Price as decimal(10,2),",
						"          TotalProductSalesAmount as decimal(10,2),",
						"          TotalSalesCount as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['ProductID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID = aggregate1@ProductID,",
						"          ProductName = aggregate1@ProductName,",
						"          Category = aggregate1@Category,",
						"          Price = aggregate1@Price,",
						"          TotalProductSalesAmount = aggregate1@TotalProductSalesAmount,",
						"          TotalSalesCount = aggregate1@TotalSalesCount",
						"     )) ~> RevenuePerProduct",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductId as integer,",
						"          ProductName as string,",
						"          Category as string,",
						"          StockQuantity as integer,",
						"          TotalQuantitySold as integer,",
						"          RemainingStockQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['ProductId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductId = aggregate3@ProductID,",
						"          ProductName = aggregate3@ProductName,",
						"          Category = aggregate3@Category,",
						"          StockQuantity = aggregate3@StockQuantity,",
						"          TotalQuantitySold = aggregate3@TotalQuantitySold,",
						"          RemainingStockQuantity = derivedColumn1@RemainingStockQuantity",
						"     )) ~> ProductPerformance",
						"AlterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          TotalAmount as decimal(10,2),",
						"          rank as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['CustomerID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = aggregate2@CustomerID,",
						"          CustomerName = aggregate2@CustomerName,",
						"          TotalAmount = aggregate2@TotalAmount,",
						"          rank = rank1@rank",
						"     )) ~> TopCustomers"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_topcustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "silver to gold",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "silver to gold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sales": {},
									"products": {},
									"customers": {},
									"RevenuePerProducttable": {},
									"TopCustomersTable": {},
									"ProductPerformanceTable": {},
									"RevenuePerProduct": {},
									"ProductPerformance": {},
									"TopCustomers": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/silver to gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sales retail ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_customers_backend",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(item().name, formatDateTime(utcNow(),'yyyy_MM_dd'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "date",
													"value": {
														"value": "@formatDateTime(utcNow(),'yyyy-MM-dd')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy data1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"wildcardFileName": {
																"value": "@concat('customers_', formatDateTime(utcNow(), 'yyyy_MM_dd'), '.csv')\n",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_customers_backend",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_raw_customers",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_op_products",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_raw",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "raw to silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "raw to silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sales": {},
									"products": {},
									"Customers": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "silver to gold",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "raw to silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "silver to gold",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sales": {},
									"products": {},
									"customers": {},
									"RevenuePerProducttable": {},
									"TopCustomersTable": {},
									"ProductPerformanceTable": {},
									"RevenuePerProduct": {},
									"ProductPerformance": {},
									"TopCustomers": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"date": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/raw to silver')]",
				"[concat(variables('factoryId'), '/dataflows/silver to gold')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tumbling_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "sales data to raw",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 8,
					"startTime": "2025-03-12T22:45:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sales data to raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/schedule trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "sales retail ETL",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2025-03-14T23:48:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/sales retail ETL')]"
			]
		}
	]
}